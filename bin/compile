#!/bin/bash

# Usage: bin/compile BUILD_DIR CACHE_DIR ENV_DIR

set -e
set -o pipefail

build_dir="$1"
env_dir="$3"

function die {
    echo "$@" >&2
    exit 1
}

function indent {
    sed -u 's/^/       /'
}

if [[ -f "$env_dir/BUILDPACK_GIT_LFS_REPO" ]]; then
    repo="$(< "$env_dir/BUILDPACK_GIT_LFS_REPO")"
else
    die "Env var BUILDPACK_GIT_LFS_REPO is not set"
fi

if [[ -f "$env_dir/BUILDPACK_GIT_LFS_SSH_PRIVATE_KEY" ]]; then
    ssh_key="$(< "$env_dir/BUILDPACK_GIT_LFS_SSH_PRIVATE_KEY")"
else
    die "Env var BUILDPACK_GIT_LFS_SSH_PRIVATE_KEY is not set"
fi

include_paths=""
if [[ -f "$env_dir/BUILDPACK_GIT_LFS_INCLUDE_PATHS" ]]; then
    include_paths="--include=$(< "$env_dir/BUILDPACK_GIT_LFS_INCLUDE_PATHS")"
fi

exclude_paths=""
if [[ -f "$env_dir/BUILDPACK_GIT_LFS_EXCLUDE_PATHS" ]]; then
    exclude_paths="--exclude=$(< "$env_dir/BUILDPACK_GIT_LFS_EXCLUDE_PATHS")"
fi

echo "-----> Install Git LFS"
(
    pushd /tmp
    wget -nv https://github.com/git-lfs/git-lfs/releases/download/v2.11.0/git-lfs-linux-amd64-v2.11.0.tar.gz \
         -O git-lfs.tar.gz
    tar -xvzf /tmp/git-lfs.tar.gz
    popd
) | indent

git_user="${repo%@*}"
git_host="${repo#*@}"
git_host="${git_host%:*}"

echo "-----> Download Git LFS assets ($SOURCE_VERSION)"
(
    pushd "$build_dir"

    mkdir -p .heroku/bin
    mv /tmp/git-lfs .heroku/bin/

    mkdir -p .profile.d
    cat <<"EOF" > .profile.d/heroku-buildpack-git-lfs.sh
export PATH="$HOME/.heroku/bin:$PATH"
EOF
    export PATH="$build_dir/.heroku/bin:$PATH"

    mkdir -p /app/.ssh
    chmod 700 /app/.ssh
    echo "${ssh_key}" | base64 --decode > /app/.ssh/id_rsa

    echo -e "Host ${git_host}\n"\
          " User ${git_user}\n"\
          " IdentityFile /app/.ssh/id_rsa\n"\
          " IdentitiesOnly yes\n"\
          " UserKnownHostsFile=/dev/null\n"\
          " StrictHostKeyChecking no"\
          > /app/.ssh/config

    git version
    git-lfs version

    git init
    git remote add origin "$repo"
    git fetch -q origin
    git reset -q --mixed "$SOURCE_VERSION"
    git lfs install
    # Monorepo compatibility - only pull large files in the sub-project of the monorepo
    git lfs pull "$include_paths" "$exclude_paths"

    rm -rf .git
    rm -rf /app/.ssh
) | indent
